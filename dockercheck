#!/usr/bin/python3

import os
import psutil
import logging
import threading
import cherrypy
import docker
from prometheus_client import generate_latest, Enum

try:
    LISTEN_PORT = int(os.environ.get("DOCKERCHECK_HTTP_PORT", "8080"))
except:
    logging.error("DOCKERCHECK_HTTP_PORT must be an integer value")
    exit(2)

DOCKER_LABEL = os.environ.get("DOCKERCHECK_LABEL", "com.docker.compose.project")
METRIC_NAME = os.environ.get("DOCKERCHECK_PROM_METRIC", "container_status")
# Default disk usage threshold set to -1
DISK_USAGE_THRESHOLD = int(os.environ.get("DOCKERCHECK_DISK_USAGE_THRESHOLD", "-1"))

prom_container_status = Enum(
    METRIC_NAME,
    "Returns the status of a Compose project container",
    states=["restarting", "running", "paused", "exited", "unhealthy"],
    labelnames=["name", "role"],
)


def check_disk_full(threshold):
    """
    Checks the disk usage and returns True if it's below the specified threshold,
    otherwise returns False.
    """
    if threshold < 0:
        return False
    try:
        disk_usage_percent = psutil.disk_usage("/").percent
        if disk_usage_percent > threshold:
            logging.error(f"Disk usage is over {threshold}%: {disk_usage_percent}%")
            return True
    except Exception as e:
        logging.error(f"Error checking disk usage: {e}")
        return False
    return False


def check_containers_status(client, filter_label, disk_usage_threshold):
    """
    Check the containers statuses and disk usage and export metrics

    Iterates over a list of containers in *any* state and filtering on `filter_label`
    Updates Prometheus metrics for each container and logs disk usage errors.

    It returns HTTP status code (200) if all containers are running and disk usage is below threshold.

    """
    containers = client.containers.list(all=True, filters={"label": filter_label})
    if not containers:
        return 500

    http_status = 200
    for container in containers:
        prom_container_status.labels(
            container.name, container.labels[filter_label]
        ).state(container.status)
        if container.status != "running":
            http_status = 500
        try:
            if container.attrs["State"]["Health"]["Status"] == "unhealthy":
                # health can be "starting", "healthy" and "unhealthy". we care just about the latter
                prom_container_status.labels(
                    container.name, container.labels[filter_label]
                ).state("unhealthy")
                http_status = 500
        except KeyError:
            pass
    # Check disk usage
    if check_disk_full(disk_usage_threshold):
        http_status = 500
    return http_status


class HealthCheck(object):
    @cherrypy.expose
    def health(self):
        """
        Exposes the /health endpoint to check the status of the containers
        and the disk usage.

        """
        try:
            client = docker.from_env()
        except:
            cherrypy.log.error(msg="Cannot connect to docker daemon")
            cherrypy.response.status = 500
            return
        cherrypy.response.status = check_containers_status(
            client, DOCKER_LABEL, DISK_USAGE_THRESHOLD
        )
        client.close()

    @cherrypy.expose
    def metrics(self):
        """
        Exposes the /metrics endpoint to return the Prometheus metrics
        """
        return generate_latest()


if __name__ == "__main__":
    # configure and start the cherrypy server
    cherrypy.config.update(
        {"server.socket_port": LISTEN_PORT, "server.socket_host": "0.0.0.0"}
    )
    cherrypy.quickstart(HealthCheck(), "/")
